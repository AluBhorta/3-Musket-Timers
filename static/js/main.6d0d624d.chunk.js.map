{"version":3,"sources":["components/Footer.tsx","components/Header.tsx","util/index.ts","components/Timer.tsx","components/TotalTimer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","href","Header","username","AppBar","position","Toolbar","style","flex","toFormattedTime","counter","intervalInMs","totalSecs","minutes","Math","floor","secsRemain","toFixed","Timer","interval","title","callbackTime","useState","setCounter","intervalRef","useRef","status","setStatus","pauseTimer","current","clearInterval","startTimer","setInterval","t","resetTimer","useEffect","Card","CardContent","Chip","label","variant","ButtonGroup","Button","onClick","color","TotalTimer","tenSecs","oneSecs","hundredMs","App","setTenSecs","setOneSecs","setHundredMs","Container","maxWidth","Grid","container","spacing","justify","alignItems","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d0d624d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer: React.FC = () => {\n  return (\n    <>\n      <div className=\"footer\">\n        <p>\n          Made with {\"<3\"} by &nbsp;\n          <a href=\"https://github.com/AluBhorta/3-Musket-Timers\">AluBhorta</a>.\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default Footer;\n","import { AppBar, Toolbar } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Header: React.FC<{\n  username?: string;\n}> = ({ username }) => {\n  return (\n    <>\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <div style={{ flex: 1 }}>\n            <h1>3 Musket-Timers</h1>\n          </div>\n\n          <p>{username}</p>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default Header;\n","export function toFormattedTime(counter: number, intervalInMs: number) {\n  const totalSecs = (counter * intervalInMs) / 1000;\n\n  const minutes = Math.floor(totalSecs / 60);\n  const secsRemain = totalSecs - minutes * 60;\n\n  return `${minutes}:${secsRemain.toFixed(3)}`;\n}\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  CardContent,\n  Chip,\n} from \"@material-ui/core\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { toFormattedTime } from \"../util\";\n\nexport type TimerStatus = \"RUNNING\" | \"HALTED\";\n\nconst Timer: React.FC<{\n  title?: string;\n  interval: number;\n  callbackTime: (t: number) => void;\n}> = ({ interval, title, callbackTime }) => {\n  const [counter, setCounter] = useState(0);\n  const intervalRef = useRef<NodeJS.Timeout>();\n  const [status, setStatus] = useState<TimerStatus>(\"HALTED\");\n\n  const pauseTimer = () => {\n    intervalRef.current && clearInterval(intervalRef.current);\n    setStatus(\"HALTED\");\n  };\n\n  const startTimer = () => {\n    pauseTimer();\n    intervalRef.current = setInterval(() => {\n      setCounter((t) => {\n        callbackTime(t + 1);\n        return t + 1;\n      });\n    }, interval);\n    setStatus(\"RUNNING\");\n  };\n\n  const resetTimer = () => {\n    pauseTimer();\n    setCounter(0);\n    callbackTime(0);\n    setStatus(\"HALTED\");\n  };\n\n  useEffect(() => {\n    startTimer();\n    return () => {\n      resetTimer();\n    };\n  }, []);\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <div className=\"_center\">\n            <h1>\n              {title || \"Timer\"} - (i {interval / 1000}s)\n            </h1>\n            <h1>{toFormattedTime(counter, interval)}</h1>\n            <p>\n              <Chip label={status} variant=\"outlined\" />\n            </p>\n\n            <ButtonGroup variant=\"contained\">\n              {status === \"HALTED\" ? (\n                <Button onClick={() => startTimer()}>Start</Button>\n              ) : (\n                <Button onClick={() => pauseTimer()}>Pause</Button>\n              )}\n              <Button color=\"primary\" onClick={() => resetTimer()}>\n                Reset\n              </Button>\n            </ButtonGroup>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default Timer;\n","import { Card, CardContent } from \"@material-ui/core\";\nimport React from \"react\";\nimport { toFormattedTime } from \"../util\";\n\nconst TotalTimer: React.FC<{\n  tenSecs: number;\n  oneSecs: number;\n  hundredMs: number;\n}> = ({ tenSecs, oneSecs, hundredMs }) => {\n  const totalSecs = tenSecs * 10 + oneSecs + hundredMs * 0.1;\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <div className=\"_center\">\n            <h1>Total Timer</h1>\n            <h1>{toFormattedTime(totalSecs, 1000)}</h1>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default TotalTimer;\n","import { Container, Grid } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\n\nimport Timer from \"./components/Timer\";\nimport TotalTimer from \"./components/TotalTimer\";\n\nfunction App() {\n  const [tenSecs, setTenSecs] = useState(0);\n  const [oneSecs, setOneSecs] = useState(0);\n  const [hundredMs, setHundredMs] = useState(0);\n\n  const [username, setUsername] = useState(\"John Doe\")\n\n  return (\n    <>\n      <Header username={username} />\n      <Container maxWidth=\"md\">\n        <Grid container spacing={3} justify=\"space-evenly\" alignItems=\"center\">\n          <Grid item>\n            <Timer\n              title=\"Timer 1\"\n              interval={10000}\n              callbackTime={(t) => {\n                setTenSecs(t);\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <Timer\n              title=\"Timer 2\"\n              interval={1000}\n              callbackTime={(t) => {\n                setOneSecs(t);\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <Timer\n              title=\"Timer 3\"\n              interval={100}\n              callbackTime={(t) => {\n                setHundredMs(t);\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        <TotalTimer tenSecs={tenSecs} oneSecs={oneSecs} hundredMs={hundredMs} />\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}